goroutine B started
goroutine B waiting for goroutine A to acquire the read lock
goroutine A started
goroutine A acquired the read lock
goroutine A sending signal to goroutine B
goroutine A sleeping for 2ms
goroutine B attempting to acquire the write lock
goroutine A attempting to acquire another read lock -- if there was read preference, this would succeed
fatal error: all goroutines are asleep - deadlock!

goroutine 1 [semacquire]:
sync.runtime_Semacquire(0x140000021c0?)
sync.(*WaitGroup).Wait(0x14000096020)
main.main()

goroutine 19 [sync.RWMutex.RLock]:
sync.runtime_SemacquireRWMutexR(0x1028597c8?, 0x18?, 0x14000098f48?)
sync.(*RWMutex).RLock(...)
main.main.func2()
created by main.main in goroutine 1

goroutine 20 [sync.RWMutex.Lock]:
sync.runtime_SemacquireRWMutex(0x0?, 0x31?, 0x14000102000?)
sync.(*RWMutex).Lock(0x1028597c8?)
main.main.func3()
created by main.main in goroutine 1
exit status 2
